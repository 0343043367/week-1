name: CI - Build and Test

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  build-api:
    name: Build API
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install API dependencies
        working-directory: ./api
        run: npm ci

      - name: Build API
        working-directory: ./api
        run: npm run build

      - name: Test API Docker build
        run: docker build -t mindx-week1-api:test ./api

      - name: API Build Summary
        run: |
          echo "‚úÖ API build successful!"

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build Frontend
        working-directory: ./frontend
        run: npm run build

      - name: Test Frontend Docker build
        run: docker build -t mindx-week1-frontend:test ./frontend

      - name: Frontend Build Summary
        run: |
          echo "‚úÖ Frontend build successful!"

  validate-manifests:
    name: Validate K8s Manifests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Validate Kubernetes manifests
        run: |
          set -e  # Exit immediately if any command fails
          echo "Validating YAML syntax and basic Kubernetes structure..."

          # Install yq for YAML validation
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

          # Function to validate YAML and basic K8s structure
          validate_k8s_yaml() {
            local file=$1
            echo "Checking $file..."
            
            # Check if valid YAML
            if ! yq eval '.' "$file" > /dev/null 2>&1; then
              echo "‚ùå Invalid YAML syntax in $file"
              exit 1
            fi
            
            # Check if it has apiVersion and kind
            if ! yq eval '.apiVersion' "$file" > /dev/null 2>&1; then
              echo "‚ùå Missing apiVersion in $file"
              exit 1
            fi
            
            if ! yq eval '.kind' "$file" > /dev/null 2>&1; then
              echo "‚ùå Missing kind in $file"
              exit 1
            fi
            
            echo "‚úÖ $file is valid"
          }

          # Validate each manifest
          validate_k8s_yaml "k8s-manifests/api-deployment.yaml"
          validate_k8s_yaml "k8s-manifests/frontend-deployment.yaml"
          validate_k8s_yaml "k8s-manifests/ingress.yaml"

          echo ""
          echo "‚ö†Ô∏è Skipping cert-issuer.yaml validation (requires cert-manager CRDs)"
          echo "Note: Full validation will happen during actual deployment to AKS cluster"
          echo ""
          echo "‚úÖ All core manifests have valid YAML syntax and basic K8s structure!"

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-api, build-frontend, validate-manifests]
    if: always()

    steps:
      - name: Check build status
        run: |
          echo "üéâ CI Pipeline Summary"
          echo "API Build: ${{ needs.build-api.result }}"
          echo "Frontend Build: ${{ needs.build-frontend.result }}"
          echo "Manifest Validation: ${{ needs.validate-manifests.result }}"

          if [ "${{ needs.build-api.result }}" != "success" ] || \
             [ "${{ needs.build-frontend.result }}" != "success" ] || \
             [ "${{ needs.validate-manifests.result }}" != "success" ]; then
            echo "‚ùå Some checks failed!"
            exit 1
          else
            echo "‚úÖ All checks passed!"
          fi
